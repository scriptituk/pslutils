% PostScript General Utility Procedures
% by Raymond Luckhurst, scriptit.uk

% test if running ghostscript interpreter
% - is_gs <bool>
/is_gs {
	product (Ghostscript) search { pop pop pop true }{ pop false } ifelse
} bind def

% maximum / minimum value
/max where {
	pop % gs
}{
	/max { 2 copy lt { exch } if pop } bind def
	/min { 2 copy gt { exch } if pop } bind def
} ifelse

% mm to points
/mm {
	360 mul 127 div % x 72 / 25.4
} bind def

% points to mm
/pt {
	127 mul 360 div % x 25.4 / 72
} bind def

% current x point
/x {
	currentpoint pop
} bind def

% current y point
/y {
	currentpoint exch pop
} bind def

% 24-bit RGB to red green blue values 0.0 - 1.0
% <int> rgb <red> <green> <blue>
/rgb {
	16#FFFFFF and
	dup dup
	-16 bitshift 255 div
	exch -8 bitshift 16#FF and 255 div
	3 -1 roll 16#FF and 255 div
} bind def

% test if RGB is gray and leave value 0.0 - 1.0
% <red> <green> <blue> is_gray <gray> true
%							or <red> <green> <blue> false
/is_gray {
	2 copy eq 3 index 3 index eq and
	dup { 3 1 roll pop pop } if
} bind def

% create chequered image data source
% TODO: do it in PaintProc instead
% <size> <colour1> <colour2> chequereddata <width> <height> <bits> <components> <samples>
/chequereddata {
	2 {
		[
			exch dup 16#FFFFFF and
			-16 bitshift exch dup 16#FFFF and
			-8 bitshift exch 16#FF and
			3 copy eq exch 2 index eq and { pop pop } if % grey
		] exch
	} repeat
	2 copy length exch length eq not {
		2 {
			exch dup length 1 eq { aload pop dup dup 3 array astore } if
		} repeat
	} if
	dup length 3 index dup add dup mul mul string
	0
	2 {
		4 index {
			4 index { 3 index { 3 copy put pop 1 add } forall } repeat
			4 index { 2 index { 3 copy put pop 1 add } forall } repeat
		} repeat
		4 2 roll exch 4 2 roll
	} repeat
	pop
	4 -1 roll dup add dup
	8
	6 -2 roll pop length
	5 -1 roll
} bind def

% extract width, height, bits per sample, number of components, sample data from JPEG file
% <filename> jpegdata <width> <height> <bits> <components> <samples>
/jpegdata {
	dup status pop pop pop exch pop exch % file size
	(r) file exch string readstring pop % raw file data
	dup
	dup length
	2
	{
		2 copy lt { 0 0 0 0 7 4 roll exit } if % EOF
		2 index 1 index get
		16#FF ne { 0 0 0 0 7 4 roll exit } if % error
		1 add
		2 index 1 index get
		16#C0 eq { % SOF0 marker
			3 add
			2 index 1 index get % precision
			4 1 roll % bits
			1 add
			2 index 1 index get 8 bitshift 3 index 2 index 1 add get or % height
			5 1 roll
			2 add
			2 index 1 index get 8 bitshift 3 index 2 index 1 add get or % width
			6 1 roll
			2 add
			2 index 1 index get % components
			4 1 roll
			exit
		} if
		1 add
		2 index 1 index get 8 bitshift 3 index 2 index 1 add get or
		add
	} loop
	pop pop pop
	5 -1 roll
	1 index 5 index 5 index mul mul dup 0 eq { pop 65535 } if string
	exch /DCTDecode filter exch readstring pop % decoded string
} bind def

% make tiling pattern from image data
% <width> <height> <bits> <samples> imagetile <pattern>
/imagetile {
	5 dict begin
		/$samples exch def
		/$cpts exch def
		/$bits exch def
		/$height exch def
		/$width exch def
		/$id << % image dictionary
			/ImageType 1 % opaque
			/Width $width
			/Height $height
			/ImageMatrix [$width 0 0 $height neg 0 $height]
			/DataSource $samples % image
			/BitsPerComponent $bits
			/Decode $cpts 1 eq { [0 1] }{ [0 1 0 1 0 1] } ifelse % as recommended
		>> def
		$cpts 1 eq { /DeviceGray }{ /DeviceRGB } ifelse setcolorspace
		<< % pattern dictionary
			/PatternType 1 % tiling
			/PaintType 1 % coloured
			/TilingType 3 % faster
			/BBox [0 0 1 1]
			/XStep 1
			/YStep 1
			/id $id % additional
			/PaintProc { begin id image end } bind
		>>
		$width $height neg idtransform matrix scale makepattern
	end
} bind def

% set colour space and colour/pattern
% <int or filename> colour -
/colour {
	dup type /integertype eq { % plain colour
		rgb is_gray { setgray }{ setrgbcolor } ifelse
	}{ % tiled image
		dup type /stringtype eq { % filename
			jpegdata
		}{ % [size colour1 colour2] chequered
			aload pop chequereddata
		} ifelse
		imagetile setpattern
	} ifelse
} bind def
